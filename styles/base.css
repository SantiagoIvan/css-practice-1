/* Propiedades compartidas por todos los elementos.

https://css-tricks.com/snippets/css/complete-guide-grid/

Para que quede bien el nav podria hacer todo con flex y tratar de acomodar el carrito ahi y que quede alineado, 
pero vamos a hacerlo con grid tambien para experimentar y aprender a usarlo.
Al hacerlo con grid me voy a ahorrar unos div wrappers con el display flex, va a quedar todo mas legible
https://cssgrid-generator.netlify.app/

1 row - 3 columns. 
- 1 row porque es el header solamente
- 3 columnas, 1 para el logo, otra para el nav y otra para el carrito
Puedo medi el ancho de la imagen del carrito para ajustar la tercera columna a ese valor
*/

:root {
  --color-primary: #ff7b54;
  --color-primary-text: #fff;
  --color-secondary-text: #000;

  --color-button-primary-bg: var(--color-primary-text);
  --color-button-primary-text: var(--color-primary);

  --color-button-secondary-bg: var(--color-primary);
  --color-button-secondary-text: var(--color-primary-text);

  --font-family: "Inter", sans-serif;
}

/* declaramos el color blanco en el padre asi que directamente lo heredamos */
a {
  color: inherit;
  text-decoration: none;
}
svg,
button {
  cursor: pointer;
}
.shopping-cart-icon--secondary g path {
  fill: var(--color-primary);
}
.body {
  font-family: var(--font-family);
}
.body--primary {
  background-color: var(--color-primary);
  color: var(--color-primary-text);
}
.body--secondary {
  background-color: var(--color-primary-text);
  color: var(--color-primary);
}

.main {
  padding: 0 150px;
}

/* Aplicamos la metodología BEM */
.header {
  display: grid;
  grid-template-columns: 1fr 3fr 34px;
  grid-template-rows: 1fr;
  align-items: center;
  grid-template-areas: "logo nav shopping-cart"; /* forma para nombrar a las parcelas que se forman*/
  padding: 0 60px;
}

.header__link {
  font-size: 40px;
  font-weight: bold;
}
p {
  margin: 0;
}
.nav {
  display: inline-block; /* En la misma linea los hijos */
  justify-self: end;
  /* se alinea a la derecha del padre, siendo el padre un grid. Es como si desde un flex container tirara un flex-end. 
  Me permite alinear a cada elemento en particular */
}
.nav__list {
  list-style: none;
  display: flex;
}
.nav__list-item {
  margin-right: 36px;
  font-size: 20px;
}

.button {
  height: 100px;
  text-align: center;
  padding: 0 64px;
  font-size: 32px;
  font-weight: bold;
  border: 4px solid white;
  box-sizing: border-box; /* Segun el figma, la caja entera tenia que medir 100px */
  transition: background-color 0.2s ease-in;
}

.button--main {
  background-color: var(--color-button-primary-bg);
  color: var(--color-button-primary-text);
}

.button--secondary {
  background-color: var(--color-button-secondary-bg);
  color: var(--color-button-secondary-text);
  border: 4px solid white;
}

/* Para crear el espacio entre los botones puedo hacer que los botones en general tengan un margin
pero eso podría terminar afectandome en otros lugares donde no quiera un margen. Ademas, le estaría agregando 
un margen al último hijo cosa que no quiero porque no hay nada a su lado */

.button:not(button:last-of-type) {
  margin-right: 40px;
  /* el margin-inline-end me va a hacer lo mismo, pero si estoy en nose, israel, que leen al reves
  no generaría el efecto deseado. Como me chupa un huevo eso no lo voy a contemplar. KISS*/
}

.button--main:hover {
  background-color: var(--color-button-primary-text);
  color: var(--color-button-primary-bg);
}
.button--secondary:hover {
  background-color: var(--color-button-secondary-text);
  color: var(--color-button-secondary-bg);
}
